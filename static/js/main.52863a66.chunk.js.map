{"version":3,"sources":["components/Statistic/Statistic.module.css","components/Overlay/Overlay.module.css","components/Main/Main.module.css","redux/cardsBase.ts","components/Common/shuffle.tsx","redux/main-reducer.ts","components/Main/Card.tsx","components/Main/Main.tsx","redux/header-reducer.ts","redux/navbar-reducer.ts","redux/quiz-reducer.ts","components/Main/MainContainer.tsx","redux/statistic-reducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","components/Navbar/NavbarContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Overlay/Overlay.tsx","components/Overlay/OverlayContainer.tsx","components/Statistic/Statistic.tsx","components/Common/selectors.ts","components/Statistic/StatisticContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Navbar/Navbar.module.css","components/Main/Card.module.css","components/Header/Header.module.css"],"names":["module","exports","cardsBase","mainImage","navbarImage","cards","wordInEnglish","wordInRussian","imageUrl","audioSrc","shuffle","arr","newArray","slice","i","length","j","Math","floor","random","mainReducerActions","type","arrayOfThemes","theme","cardsInfo","isVisible","initialState","arrayOfAudioQuestionsSrc","isMainPageVisible","mainReducer","state","action","map","themeName","gameTheme","el","Card","props","cardRef","useRef","document","createElement","onMouseLeave","current","style","transform","className","styles","flipEffect","ref","frontCard","frontCardTheme","frontCardImage","src","process","alt","isPlayModeOn","hide","readAWordButton","onClick","audioQuestion","play","reverseCardButton","backCard","backCardImage","cardOverlay","Main","victoryImage","losingImage","cardsGrid","mistakesWrapper","useState","mistakesQuantity","setMistakesQuantity","useEffect","querySelectorAll","forEach","isQuizRunning","setMainPageCards","activeLink","insertTheme","setCanISeeRunGameButton","Audio","audioEffect","main","cardsWrapper","index","cardContainer","event","setActiveLink","audioQuestionSrc","currentTarget","children","addUserAnswer","newArr","questionsListSrc","push","setQuestionsListSrc","question","pop","setAudioQuestionSrc","setTimeout","answersList","includes","classList","add","remove","window","location","reload","endGameImage","headerReducerActions","canISee","isThemeSelected","canISeeRunGameButton","headerReducer","isNavbarVisible","arrayOfNavbarIconsUrl","navbarReducerActions","setIsNavbarVisible","link","navbarReducer","quizReducerActions","isAnswerCorrect","quizReducer","compose","connect","navbar","header","quiz","dispatch","isStatisticPageVisible","wordsArray","statisticReducerActions","statisticReducer","reducers","combineReducers","statistic","store","createStore","Navbar","changeParameters","setIsQuizRunning","setIsMainPageVisible","setIsStatisticPageVisible","getArrayOfThemes","getArrayOfNavbarIconsUrl","s","active","innerText","navbarToLeft","hamburgerMenu","hamburgerMenuToRight","line","line1","line2","line3","navList","navItem","chooseThemeButton","navIcon","arg","Object","keys","values","Header","cleanAnswersList","audio","gamModeWrapper","gameMode","setPlayModeOff","setPlayModeOn","gameModeTrigger","gameModeTitle","startGameButton","emojiPanel","Overlay","overlay","Statistic","setWords","table","colName","item","eng","rus","getWords","createSelector","key","card","App","NavbarContainer","HeaderContainer","MainContainer","StatisticContainer","OverlayContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.52863a66.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Statistic_table__ZpTfm\",\"colName\":\"Statistic_colName__sLcMT\",\"hide\":\"Statistic_hide__2H4AI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"Overlay_overlay__2KJfw\",\"hide\":\"Overlay_hide__3jEGg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsWrapper\":\"Main_cardsWrapper__1_RI9\",\"cardsGrid\":\"Main_cardsGrid__3SJdJ\",\"cardContainer\":\"Main_cardContainer__1J3Lv\",\"cardOverlay\":\"Main_cardOverlay__3eSIJ\",\"backCard\":\"Main_backCard__2pfZA\",\"hide\":\"Main_hide__1uTQw\",\"endGameImage\":\"Main_endGameImage__2AhTe\",\"mistakesWrapper\":\"Main_mistakesWrapper__2uKGs\"};","const cardsBase = {\r\n\r\n  \"Actions\":\r\n    {\r\n      mainImage: \"/images/actions/mainImage.png\",\r\n      navbarImage: \"/images/actions/navbarImage.png\",\r\n      cards: [\r\n        {\r\n          wordInEnglish: 'clean',\r\n          wordInRussian: 'убирать',\r\n          imageUrl: '/images/actions/clean.png',\r\n          audioSrc: '/audio/actions/clean.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'cook',\r\n          wordInRussian: 'готовить',\r\n          imageUrl: '/images/actions/cook.png',\r\n          audioSrc: '/audio/actions/cook.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'cry',\r\n          wordInRussian: 'плакать',\r\n          imageUrl: '/images/actions/cry.png',\r\n          audioSrc: '/audio/actions/cry.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'dance',\r\n          wordInRussian: 'танцевать',\r\n          imageUrl: '/images/actions/dance.png',\r\n          audioSrc: '/audio/actions/dance.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'draw',\r\n          wordInRussian: 'рисовать',\r\n          imageUrl: '/images/actions/draw.png',\r\n          audioSrc: '/audio/actions/draw.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'drop',\r\n          wordInRussian: 'уронить',\r\n          imageUrl: '/images/actions/drop.png',\r\n          audioSrc: '/audio/actions/drop.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'jump',\r\n          wordInRussian: 'прыгать',\r\n          imageUrl: '/images/actions/jump.png',\r\n          audioSrc: '/audio/actions/jump.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'kick',\r\n          wordInRussian: 'пинать',\r\n          imageUrl: '/images/actions/kick.png',\r\n          audioSrc: '/audio/actions/kick.mp3',\r\n        },\r\n      ]\r\n    },\r\n\r\n  \"Animals\":\r\n    {\r\n      mainImage: \"/images/animals/mainImage.png\",\r\n      navbarImage: \"/images/animals/navbarImage.png\",\r\n      cards: [\r\n        {\r\n          wordInEnglish: 'cat',\r\n          wordInRussian: 'кошка',\r\n          imageUrl: '/images/animals/cat.png',\r\n          audioSrc: '/audio/animals/cat.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'goat',\r\n          wordInRussian: 'козёл',\r\n          imageUrl: '/images/animals/goat.png',\r\n          audioSrc: '/audio/animals/goat.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'lion',\r\n          wordInRussian: 'лев',\r\n          imageUrl: '/images/animals/lion.png',\r\n          audioSrc: '/audio/animals/lion.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'mouse',\r\n          wordInRussian: 'мышка',\r\n          imageUrl: '/images/animals/mouse.png',\r\n          audioSrc: '/audio/animals/mouse.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'owl',\r\n          wordInRussian: 'сова',\r\n          imageUrl: '/images/animals/owl.png',\r\n          audioSrc: '/audio/animals/owl.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'rabbit',\r\n          wordInRussian: 'кролик',\r\n          imageUrl: '/images/animals/rabbit.png',\r\n          audioSrc: '/audio/animals/rabbit.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'yak',\r\n          wordInRussian: 'як',\r\n          imageUrl: '/images/animals/yak.png',\r\n          audioSrc: '/audio/animals/yak.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'zebra',\r\n          wordInRussian: 'зебра',\r\n          imageUrl: '/images/animals/zebra.png',\r\n          audioSrc: '/audio/animals/zebra.mp3',\r\n        },\r\n      ]\r\n    },\r\n\r\n  \"Food\":\r\n    {\r\n      mainImage: \"/images/food/mainImage.png\",\r\n      navbarImage: \"/images/food/navbarImage.png\",\r\n      cards: [\r\n        {\r\n          wordInEnglish: 'bean',\r\n          wordInRussian: 'фасоль',\r\n          imageUrl: '/images/food/bean.png',\r\n          audioSrc: '/audio/food/bean.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'bread',\r\n          wordInRussian: 'хлеб',\r\n          imageUrl: '/images/food/bread.png',\r\n          audioSrc: '/audio/food/bread.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'butter',\r\n          wordInRussian: 'масло',\r\n          imageUrl: '/images/food/butter.png',\r\n          audioSrc: '/audio/food/butter.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'cake',\r\n          wordInRussian: 'торт',\r\n          imageUrl: '/images/food/cake.png',\r\n          audioSrc: '/audio/food/cake.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'candy',\r\n          wordInRussian: 'конфеты',\r\n          imageUrl: '/images/food/candy.png',\r\n          audioSrc: '/audio/food/candy.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'carrot',\r\n          wordInRussian: 'морковка',\r\n          imageUrl: '/images/food/carrot.png',\r\n          audioSrc: '/audio/food/carrot.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'cheese',\r\n          wordInRussian: 'сыр',\r\n          imageUrl: '/images/food/cheese.png',\r\n          audioSrc: '/audio/food/cheese.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'corn',\r\n          wordInRussian: 'кукуруза',\r\n          imageUrl: '/images/food/corn.png',\r\n          audioSrc: '/audio/food/corn.mp3',\r\n        },\r\n      ],\r\n    },\r\n\r\n  \"Months\":\r\n    {\r\n      mainImage: \"/images/months/mainImage.png\",\r\n      navbarImage: \"/images/months/navbarImage.png\",\r\n      cards: [\r\n        {\r\n          wordInEnglish: 'april',\r\n          wordInRussian: 'апрель',\r\n          imageUrl: '/images/months/april.png',\r\n          audioSrc: '/audio/months/april.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'august',\r\n          wordInRussian: 'август',\r\n          imageUrl: '/images/months/august.png',\r\n          audioSrc: '/audio/months/august.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'february',\r\n          wordInRussian: 'февраль',\r\n          imageUrl: '/images/months/february.png',\r\n          audioSrc: '/audio/months/february.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'january',\r\n          wordInRussian: 'январь',\r\n          imageUrl: '/images/months/january.png',\r\n          audioSrc: '/audio/months/january.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'june',\r\n          wordInRussian: 'июнь',\r\n          imageUrl: '/images/months/june.png',\r\n          audioSrc: '/audio/months/june.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'march',\r\n          wordInRussian: 'март',\r\n          imageUrl: '/images/months/march.png',\r\n          audioSrc: '/audio/months/march.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'may',\r\n          wordInRussian: 'май',\r\n          imageUrl: '/images/months/may.png',\r\n          audioSrc: '/audio/months/may.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'september',\r\n          wordInRussian: 'сентябрь',\r\n          imageUrl: '/images/months/september.png',\r\n          audioSrc: '/audio/months/september.mp3',\r\n        },\r\n      ],\r\n    },\r\n\r\n  \"Professions\":\r\n    {\r\n      mainImage: \"/images/professions/mainImage.png\",\r\n      navbarImage: \"/images/professions/navbarImage.png\",\r\n      cards: [\r\n        {\r\n          wordInEnglish: 'actor',\r\n          wordInRussian: 'актёр',\r\n          imageUrl: '/images/professions/actor.png',\r\n          audioSrc: '/audio/professions/actor.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'barber',\r\n          wordInRussian: 'парикмахер',\r\n          imageUrl: '/images/professions/barber.png',\r\n          audioSrc: '/audio/professions/barber.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'chef',\r\n          wordInRussian: 'повар',\r\n          imageUrl: '/images/professions/chef.png',\r\n          audioSrc: '/audio/professions/chef.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'doctor',\r\n          wordInRussian: 'доктор',\r\n          imageUrl: '/images/professions/doctor.png',\r\n          audioSrc: '/audio/professions/doctor.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'farmer',\r\n          wordInRussian: 'фермер',\r\n          imageUrl: '/images/professions/farmer.png',\r\n          audioSrc: '/audio/professions/farmer.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'firefighter',\r\n          wordInRussian: 'пожарный',\r\n          imageUrl: '/images/professions/firefighter.png',\r\n          audioSrc: '/audio/professions/firefighter.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'lawyer',\r\n          wordInRussian: 'юрист',\r\n          imageUrl: '/images/professions/lawyer.png',\r\n          audioSrc: '/audio/professions/lawyer.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'miner',\r\n          wordInRussian: 'шахтёр',\r\n          imageUrl: '/images/professions/miner.png',\r\n          audioSrc: '/audio/professions/miner.mp3',\r\n        },\r\n      ],\r\n    },\r\n\r\n  \"Sea animals\":\r\n    {\r\n      mainImage: \"/images/sea_animals/mainImage.png\",\r\n      navbarImage: \"/images/sea_animals/navbarImage.png\",\r\n      cards: [\r\n        {\r\n          wordInEnglish: 'octopus',\r\n          wordInRussian: 'осьминог',\r\n          imageUrl: '/images/sea_animals/octopus.png',\r\n          audioSrc: '/audio/sea_animals/octopus.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'seal',\r\n          wordInRussian: 'тюлень',\r\n          imageUrl: '/images/sea_animals/seal.png',\r\n          audioSrc: '/audio/sea_animals/seal.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'shark',\r\n          wordInRussian: 'акула',\r\n          imageUrl: '/images/sea_animals/shark.png',\r\n          audioSrc: '/audio/sea_animals/shark.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'squid',\r\n          wordInRussian: 'кальмар',\r\n          imageUrl: '/images/sea_animals/squid.png',\r\n          audioSrc: '/audio/sea_animals/squid.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'starfish',\r\n          wordInRussian: 'звёздочка',\r\n          imageUrl: '/images/sea_animals/starfish.png',\r\n          audioSrc: '/audio/sea_animals/starfish.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'turtle',\r\n          wordInRussian: 'черепашка',\r\n          imageUrl: '/images/sea_animals/turtle.png',\r\n          audioSrc: '/audio/sea_animals/turtle.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'walrus',\r\n          wordInRussian: 'морж',\r\n          imageUrl: '/images/sea_animals/walrus.png',\r\n          audioSrc: '/audio/sea_animals/walrus.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'whale',\r\n          wordInRussian: 'кит',\r\n          imageUrl: '/images/sea_animals/whale.png',\r\n          audioSrc: '/audio/sea_animals/whale.mp3',\r\n        },\r\n      ],\r\n    },\r\n\r\n  \"Transport\":\r\n    {\r\n      mainImage: \"/images/transport/mainImage.png\",\r\n      navbarImage: \"/images/transport/navbarImage.png\",\r\n      cards: [\r\n        {\r\n          wordInEnglish: 'airplane',\r\n          wordInRussian: 'самолёт',\r\n          imageUrl: '/images/transport/airplane.png',\r\n          audioSrc: '/audio/transport/airplane.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'car',\r\n          wordInRussian: 'машина',\r\n          imageUrl: '/images/transport/car.png',\r\n          audioSrc: '/audio/transport/car.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'motorcycle',\r\n          wordInRussian: 'мотоцикл',\r\n          imageUrl: '/images/transport/motorcycle.png',\r\n          audioSrc: '/audio/transport/motorcycle.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'rocket',\r\n          wordInRussian: 'ракета',\r\n          imageUrl: '/images/transport/rocket.png',\r\n          audioSrc: '/audio/transport/rocket.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'ship',\r\n          wordInRussian: 'корабль',\r\n          imageUrl: '/images/transport/ship.png',\r\n          audioSrc: '/audio/transport/ship.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'submarine',\r\n          wordInRussian: 'субмарина',\r\n          imageUrl: '/images/transport/submarine.png',\r\n          audioSrc: '/audio/transport/submarine.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'train',\r\n          wordInRussian: 'поезд',\r\n          imageUrl: '/images/transport/train.png',\r\n          audioSrc: '/audio/transport/train.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'truck',\r\n          wordInRussian: 'грузовик',\r\n          imageUrl: '/images/transport/truck.png',\r\n          audioSrc: '/audio/transport/truck.mp3',\r\n        },\r\n      ],\r\n    },\r\n\r\n  \"Other\":\r\n    {\r\n      mainImage: \"/images/other/mainImage.png\",\r\n      navbarImage: \"/images/other/navbarImage.png\",\r\n      cards: [\r\n        {\r\n          wordInEnglish: 'boat',\r\n          wordInRussian: 'лодка',\r\n          imageUrl: '/images/other/boat.png',\r\n          audioSrc: '/audio/other/boat.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'egg',\r\n          wordInRussian: 'яйцо',\r\n          imageUrl: '/images/other/egg.png',\r\n          audioSrc: '/audio/other/egg.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'house',\r\n          wordInRussian: 'дом',\r\n          imageUrl: '/images/other/house.png',\r\n          audioSrc: '/audio/other/house.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'kite',\r\n          wordInRussian: 'змей',\r\n          imageUrl: '/images/other/kite.png',\r\n          audioSrc: '/audio/other/kite.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'nut',\r\n          wordInRussian: 'орех',\r\n          imageUrl: '/images/other/nut.png',\r\n          audioSrc: '/audio/other/nut.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'Queen',\r\n          wordInRussian: 'королева',\r\n          imageUrl: '/images/other/queen.png',\r\n          audioSrc: '/audio/other/queen.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'tree',\r\n          wordInRussian: 'дерево',\r\n          imageUrl: '/images/other/tree.png',\r\n          audioSrc: '/audio/other/tree.mp3',\r\n        },\r\n        {\r\n          wordInEnglish: 'umbrella',\r\n          wordInRussian: 'зонтик',\r\n          imageUrl: '/images/other/umbrella.png',\r\n          audioSrc: '/audio/other/umbrella.mp3',\r\n        },\r\n      ],\r\n    },\r\n};\r\n\r\nexport type CardsBaseKeysType = keyof typeof cardsBase\r\n\r\nexport default cardsBase","import {CardsBaseKeysType} from \"../../redux/cardsBase\";\r\nimport {CardInfoType} from \"../../redux/main-reducer\";\r\n\r\nfunction shuffle(arr: Array<any>): Array<CardsBaseKeysType> & Array<CardInfoType> {   //todo\r\n  let newArray = arr.slice();\r\n  for (let i = newArray.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\r\n  }\r\n  return newArray.slice(0,8)  // максимальное кол-во карточек на экране - 8\r\n}\r\n\r\nexport default shuffle;","import cardsBase, {CardsBaseKeysType} from \"./cardsBase\"\r\nimport {InferActionsTypes} from \"./redux-store\";\r\nimport shuffle from \"../components/Common/shuffle\";\r\n\r\nconst cardInfo: CardInfoType = {\r\n  wordInEnglish: '',\r\n  wordInRussian: '',\r\n  imageUrl: '',\r\n  audioSrc: '',\r\n}\r\n\r\nexport const mainReducerActions = {\r\n  setMainPageCards: (arr: Array<CardsBaseKeysType>) => ({type: \"main/setMainPageCards\", arrayOfThemes: arr}) as const,\r\n  insertTheme: (theme: CardsBaseKeysType) => ({type: \"main/insertTheme\", cardsInfo: cardsBase[theme].cards}) as const,\r\n  setIsMainPageVisible: (isVisible: boolean) => ({type: \"main/setIsMainPageVisible\", isVisible}) as const,\r\n}\r\n\r\nconst initialState = {\r\n  cardsInfo: [cardInfo],\r\n  arrayOfAudioQuestionsSrc: [] as Array<string>,\r\n  isMainPageVisible: true,\r\n}\r\n\r\nconst mainReducer = (state:InitialStateType = initialState, action: MainReducerActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"main/setMainPageCards\": {\r\n      return {\r\n        ...state,\r\n        cardsInfo: shuffle(action.arrayOfThemes).map((themeName) => {\r\n          return {\r\n            wordInEnglish: '',\r\n            wordInRussian: '',\r\n            imageUrl: cardsBase[themeName].mainImage,\r\n            audioSrc: '',\r\n            gameTheme: themeName,\r\n          }\r\n        }),\r\n      }\r\n    }\r\n    case \"main/insertTheme\": {\r\n      return {\r\n        ...state,\r\n        cardsInfo: shuffle(action.cardsInfo),\r\n        arrayOfAudioQuestionsSrc: shuffle(action.cardsInfo.map((el)=>el.audioSrc))\r\n      }\r\n    }\r\n    case \"main/setIsMainPageVisible\": {\r\n      return {\r\n        ...state,\r\n        isMainPageVisible: action.isVisible\r\n      }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nexport default mainReducer;\r\n\r\nexport type CardInfoType = {\r\n  wordInEnglish: string,\r\n  wordInRussian: string,\r\n  imageUrl: string,\r\n  audioSrc: string,\r\n  gameTheme?: CardsBaseKeysType,\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\nexport type MainReducerActionsType = InferActionsTypes<typeof mainReducerActions>;","import React, {useRef} from \"react\";\r\nimport styles from \"./Card.module.css\";\r\nimport {CardsBaseKeysType} from \"../../redux/cardsBase\";\r\n\r\nconst Card: React.FC<CardType> = (props) => {\r\n\r\n  const cardRef = useRef(document.createElement(\"div\"))\r\n\r\n  return (\r\n    <div onMouseLeave={() => cardRef.current.style.transform = \"\"}>\r\n      <div className={styles.flipEffect}\r\n           ref={cardRef}>\r\n        <div className={styles.frontCard}>\r\n          <h3 className={styles.frontCardTheme}>{props.gameTheme}</h3>\r\n          <img className={styles.frontCardImage}\r\n               src={process.env.PUBLIC_URL + props.imageUrl}\r\n               alt={props.wordInEnglish || props.gameTheme}/>\r\n          <h5 className={`${styles.wordInEnglish} ${props.isPlayModeOn && styles.hide}`}>{props.wordInEnglish}</h5>\r\n          <div className={`${styles.readAWordButton} ${props.gameTheme || props.isPlayModeOn ? styles.hide : ''}`}\r\n               onClick={() => {\r\n                 props.audioQuestion.src = process.env.PUBLIC_URL + props.audioSrc;\r\n                 props.audioQuestion.play()\r\n               }}>\r\n            <i className=\"fas fa-volume-up\"></i>\r\n          </div>\r\n          <div className={`${styles.reverseCardButton} ${props.gameTheme || props.isPlayModeOn ? styles.hide : ''}`}\r\n               onClick={() => cardRef.current.style.transform = \"rotateY(180deg)\"}>\r\n            <i className=\"fas fa-reply\"></i>\r\n          </div>\r\n        </div>\r\n        <div className={styles.backCard}>\r\n          <img className={styles.backCardImage}\r\n               src={process.env.PUBLIC_URL + props.imageUrl}\r\n               alt={props.wordInEnglish}/>\r\n          <h5 className={styles.wordInRussian}>{props.wordInRussian}</h5>\r\n        </div>\r\n        <div className={`${styles.cardOverlay} + ${styles.hide}`}></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;\r\n\r\ntype CardType = {\r\n  wordInEnglish: string\r\n  wordInRussian: string\r\n  imageUrl: string\r\n  audioSrc: string\r\n  gameTheme?: CardsBaseKeysType\r\n  isPlayModeOn: boolean\r\n  audioQuestion: HTMLAudioElement\r\n};","import React, {useEffect, useRef, useState} from \"react\";\r\nimport styles from \"./Main.module.css\";\r\nimport {MapDispatchPropsType, MapStatePropsType} from \"./MainContainer\";\r\nimport Card from \"./Card\";\r\n\r\nconst Main: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n  const victoryImage = useRef(document.createElement(\"img\"));\r\n  const losingImage = useRef(document.createElement(\"img\"));\r\n  const cardsGrid = useRef(document.createElement(\"div\"));\r\n  const mistakesWrapper = useRef(document.createElement(\"div\"));\r\n\r\n  const [mistakesQuantity, setMistakesQuantity] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const overlays = document.querySelectorAll(`.${styles.cardOverlay}`);\r\n    overlays.forEach((el) => {\r\n      el.className = `${styles.hide}`\r\n    })\r\n  }, [props.isQuizRunning])\r\n\r\n  useEffect(() => {\r\n    props.setMainPageCards(props.arrayOfThemes);\r\n    if (props.activeLink !== \"Wordlist\" && props.activeLink !== \"Main Page\") {\r\n      props.insertTheme(props.activeLink)\r\n    }\r\n    props.setCanISeeRunGameButton(false);\r\n  }, [props.arrayOfThemes])\r\n\r\n  const audioQuestion = new Audio();\r\n  const audioEffect = new Audio();\r\n\r\n  return (\r\n    <div className={`${styles.main} ${props.isMainPageVisible || styles.hide}`}>\r\n      <div className={styles.cardsWrapper}>\r\n        <div className={styles.cardsGrid}\r\n             ref={cardsGrid}>\r\n          {props.cardsInfo.map((el, index) => {\r\n            return el &&\r\n              <div key={index}\r\n                   className={styles.cardContainer}\r\n                   onClick={(event) => {\r\n                     if (el.gameTheme) {\r\n                       props.insertTheme(el.gameTheme);\r\n                       props.setActiveLink(el.gameTheme);\r\n                     }\r\n                     props.setCanISeeRunGameButton(true);\r\n                     if (props.isQuizRunning) {\r\n                       if (el.audioSrc === props.audioQuestionSrc) {\r\n                         event.currentTarget.children[1].className = `${styles.cardOverlay}`;\r\n                         audioEffect.src = process.env.PUBLIC_URL + '/audio/correctAnswer.mp3';\r\n                         audioEffect.play();\r\n                         props.addUserAnswer(true);\r\n                         const newArr: Array<string> = [];\r\n                         props.questionsListSrc.forEach((el) => {\r\n                           newArr.push(el)\r\n                         });\r\n                         props.setQuestionsListSrc(newArr);\r\n                         const question = newArr.pop();\r\n                         if (question) {\r\n                           props.setAudioQuestionSrc(question);\r\n                           setTimeout(() => {\r\n                             audioQuestion.src = process.env.PUBLIC_URL + question;\r\n                             audioQuestion.play()\r\n                           }, 1000);\r\n                         } else {\r\n                           setTimeout(() => {\r\n                             if (props.answersList.includes(false)) {\r\n                               audioEffect.src = process.env.PUBLIC_URL + `/audio/losing.mp3`;\r\n                               cardsGrid.current.classList.add(styles.hide);\r\n                               losingImage.current.classList.remove(styles.hide);\r\n                               mistakesWrapper.current.classList.remove(styles.hide);\r\n                               setTimeout(() => {\r\n                                 window.location.reload();\r\n                               }, 3000);\r\n                             } else {\r\n                               audioEffect.src = process.env.PUBLIC_URL + `/audio/victory.mp3`;\r\n                               cardsGrid.current.classList.add(styles.hide);\r\n                               victoryImage.current.classList.remove(styles.hide);\r\n                               setTimeout(() => {\r\n                                 window.location.reload();\r\n                               }, 3000);\r\n                             }\r\n                             audioEffect.play()\r\n                           }, 1000);\r\n                         }\r\n                       } else {\r\n                         setMistakesQuantity(mistakesQuantity + 1)\r\n                         audioEffect.src = process.env.PUBLIC_URL + '/audio/incorrectAnswer.mp3';\r\n                         audioEffect.play();\r\n                         props.addUserAnswer(false)\r\n                       }\r\n                     }\r\n                   }}>\r\n                <Card\r\n                  gameTheme={el.gameTheme}\r\n                  wordInEnglish={el.wordInEnglish}\r\n                  wordInRussian={el.wordInRussian}\r\n                  imageUrl={el.imageUrl}\r\n                  audioSrc={el.audioSrc}\r\n                  audioQuestion={audioQuestion}\r\n                  isPlayModeOn={props.isPlayModeOn}/>\r\n                <div className={styles.hide}></div>\r\n              </div>\r\n          })}\r\n        </div>\r\n        <img className={styles.endGameImage + \" \" + styles.hide}\r\n             src={process.env.PUBLIC_URL + `/images/winning.png`}\r\n             alt=\"snowman\"\r\n             ref={victoryImage}></img>\r\n        <img className={styles.endGameImage + \" \" + styles.hide}\r\n             src={process.env.PUBLIC_URL + `/images/losing2.png`}\r\n             alt=\"funnyMan\"\r\n             ref={losingImage}></img>\r\n        <div className={styles.mistakesWrapper + \" \" + styles.hide}\r\n             ref={mistakesWrapper}>\r\n          {mistakesQuantity === 1\r\n            ? `Oh my dear friend, you made ${mistakesQuantity} mistake`\r\n            : `Oh my dear friend, you made ${mistakesQuantity} mistakes`}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Main;\r\n","import {InferActionsTypes} from \"./redux-store\";\r\n\r\nexport const headerReducerActions = {\r\n  setPlayModeOn: () => ({type: \"header/setPlayModeOn\"}) as const,\r\n  setPlayModeOff: () => ({type: \"header/setPlayModeOff\"}) as const,\r\n  setIsQuizRunning: (isQuizRunning: boolean) => ({type: \"header/setIsQuizRunning\", isQuizRunning}) as const,\r\n  setCanISeeRunGameButton: (canISee: boolean) => ({type: \"header/setCanISeeRunGameButton\", canISee}) as const,\r\n}\r\n\r\nconst initialState = {\r\n  isPlayModeOn: false,\r\n  isThemeSelected: false,\r\n  isQuizRunning: false,\r\n  canISeeRunGameButton: false\r\n}\r\n\r\nconst headerReducer = (state = initialState, action: HeaderReducerActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"header/setPlayModeOn\": {\r\n      return {\r\n        ...state,\r\n        isPlayModeOn: true\r\n      }\r\n    }\r\n    case \"header/setPlayModeOff\": {\r\n      return {\r\n        ...state,\r\n        isPlayModeOn: false,\r\n        isQuizRunning: false\r\n      }\r\n    }\r\n    case \"header/setIsQuizRunning\": {\r\n      return {\r\n        ...state,\r\n        isQuizRunning: action.isQuizRunning\r\n      }\r\n    }\r\n    case \"header/setCanISeeRunGameButton\": {\r\n      return {\r\n        ...state,\r\n        canISeeRunGameButton: action.canISee\r\n      }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nexport default headerReducer;\r\n\r\nexport type HeaderReducerActionsType = InferActionsTypes<typeof headerReducerActions>;\r\nexport type InitialStateType = typeof initialState","import {InferActionsTypes} from \"./redux-store\";\r\nimport cardsBase, {CardsBaseKeysType} from \"./cardsBase\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst initialState = {\r\n  isNavbarVisible: false,\r\n  arrayOfThemes: [] as Array<CardsBaseKeysType>,\r\n  arrayOfNavbarIconsUrl: [] as Array<string>,\r\n  activeLink: \"Main Page\" as NavbarLinksType,\r\n}\r\n\r\nexport const navbarReducerActions = {\r\n  setIsNavbarVisible: (setIsNavbarVisible: boolean) => ({type: \"navbar/makeNavbarVisibil\", setIsNavbarVisible}) as const,\r\n  setArrayOfThemes: (arr: Array<CardsBaseKeysType>) => ({type: \"navbar/setArrayOfThemes\", arr}) as const,\r\n  setArrayOfNavbarIconsUrl: (arr: Array<string>) => ({type: \"navbar/setArrayOfNavbarIconsUrl\", arr}) as const,\r\n  setActiveLink: (link: NavbarLinksType) => ({type: \"navbar/setActiveLink\", link}) as const,\r\n}\r\n\r\nexport const getArrayOfThemes = (dispatch: Dispatch<NavbarReducerActionsType>) => {\r\n    const arrayOfThemes = Object.keys(cardsBase) as Array<CardsBaseKeysType>;\r\n    dispatch(navbarReducerActions.setArrayOfThemes(arrayOfThemes))\r\n}\r\n\r\nexport const getArrayOfNavbarIconsUrl = (dispatch: Dispatch<NavbarReducerActionsType>) => {\r\n  const arrayOfNavbarIconsUrl = [] as Array<string>;\r\n  Object.values(cardsBase).forEach((el) => {\r\n    arrayOfNavbarIconsUrl.push(el.navbarImage)\r\n  })\r\n  dispatch(navbarReducerActions.setArrayOfNavbarIconsUrl(arrayOfNavbarIconsUrl))\r\n}\r\n\r\nconst navbarReducer = (state = initialState, action: NavbarReducerActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"navbar/makeNavbarVisibil\": {\r\n      return {\r\n        ...state,\r\n        isNavbarVisible: action.setIsNavbarVisible\r\n      }\r\n    }\r\n    case \"navbar/setArrayOfThemes\": {\r\n      return {\r\n        ...state,\r\n        arrayOfThemes: action.arr\r\n      }\r\n    }\r\n    case \"navbar/setArrayOfNavbarIconsUrl\": {\r\n      return {\r\n        ...state,\r\n        arrayOfNavbarIconsUrl: action.arr\r\n      }\r\n    }\r\n    case \"navbar/setActiveLink\": {\r\n      return {\r\n        ...state,\r\n        activeLink: action.link\r\n      }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nexport default navbarReducer;\r\n\r\nexport type NavbarReducerActionsType = InferActionsTypes<typeof navbarReducerActions>;\r\ntype InitialStateType = typeof initialState;\r\nexport type NavbarLinksType = CardsBaseKeysType | \"Wordlist\" | \"Main Page\"","import {InferActionsTypes} from \"./redux-store\";\r\n\r\nconst initialState = {\r\n  audioQuestionSrc: \"\",\r\n  questionsListSrc: [] as Array<string>,\r\n  answersList: [] as Array<boolean>\r\n}\r\n\r\nexport const quizReducerActions = {\r\n  setAudioQuestionSrc: (audioSrc:string) => ({type: \"quiz/setAudioQuestionSrc\", audioSrc}) as const,\r\n  setQuestionsListSrc: (questionsListSrc: Array<string>) => ({type: \"quiz/setQuestionsList\", questionsListSrc}) as const,\r\n  addUserAnswer: (isAnswerCorrect: boolean) => ({type: \"quiz/addUserAnswer\", isAnswerCorrect}) as const,\r\n  cleanAnswersList: () => ({type: \"quiz/cleanAnswersList\"}) as const,\r\n}\r\n\r\nconst quizReducer = (state:InitialStateType = initialState, action: QuizReducerActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"quiz/setAudioQuestionSrc\": {\r\n      return {\r\n        ...state,\r\n        audioQuestionSrc: action.audioSrc\r\n      }\r\n    }\r\n    case \"quiz/setQuestionsList\": {\r\n      return {\r\n        ...state,\r\n        questionsListSrc: action.questionsListSrc\r\n      }\r\n    }\r\n    case \"quiz/addUserAnswer\": {\r\n      return {\r\n        ...state,\r\n        answersList: [...state.answersList, action.isAnswerCorrect]\r\n      }\r\n    }\r\n    case \"quiz/cleanAnswersList\": {\r\n      return {\r\n        ...state,\r\n        answersList: []\r\n      }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nexport default quizReducer;\r\n\r\ntype InitialStateType = typeof initialState;\r\nexport type QuizReducerActionsType = InferActionsTypes<typeof quizReducerActions>","import {MainReducerActionsType, CardInfoType, mainReducerActions} from \"../../redux/main-reducer\";\r\nimport {HeaderReducerActionsType} from \"../../redux/header-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport Main from \"./Main\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {CardsBaseKeysType} from \"../../redux/cardsBase\";\r\nimport {headerReducerActions} from \"../../redux/header-reducer\";\r\nimport {NavbarLinksType, navbarReducerActions, NavbarReducerActionsType} from \"../../redux/navbar-reducer\";\r\nimport {quizReducerActions, QuizReducerActionsType} from \"../../redux/quiz-reducer\";\r\n\r\nconst MapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    cardsInfo: [\r\n      state.main.cardsInfo[0],\r\n      state.main.cardsInfo[1],\r\n      state.main.cardsInfo[2],\r\n      state.main.cardsInfo[3],\r\n      state.main.cardsInfo[4],\r\n      state.main.cardsInfo[5],\r\n      state.main.cardsInfo[6],\r\n      state.main.cardsInfo[7]\r\n    ],\r\n    arrayOfThemes: state.navbar.arrayOfThemes,\r\n    isPlayModeOn: state.header.isPlayModeOn,\r\n    isQuizRunning: state.header.isQuizRunning,\r\n    activeLink: state.navbar.activeLink,\r\n    audioQuestionSrc: state.quiz.audioQuestionSrc,\r\n    questionsListSrc: state.quiz.questionsListSrc,\r\n    isMainPageVisible: state.main.isMainPageVisible,\r\n    answersList: state.quiz.answersList\r\n  }\r\n}\r\n\r\nconst MapDispatchToProps = (dispatch: Dispatch<MainReducerActionsType | HeaderReducerActionsType | NavbarReducerActionsType | QuizReducerActionsType>) => {\r\n  return {\r\n    setMainPageCards: (arr: Array<CardsBaseKeysType>) => {\r\n      dispatch(mainReducerActions.setMainPageCards(arr))\r\n    },\r\n    insertTheme: (theme: CardsBaseKeysType) => {\r\n      dispatch(mainReducerActions.insertTheme(theme))\r\n    },\r\n    setCanISeeRunGameButton: (canISee: boolean) => {\r\n      dispatch(headerReducerActions.setCanISeeRunGameButton(canISee))\r\n    },\r\n    setActiveLink: (link: NavbarLinksType) => dispatch(navbarReducerActions.setActiveLink(link)),\r\n    addUserAnswer: (isAnswerCorrect: boolean) => dispatch(quizReducerActions.addUserAnswer(isAnswerCorrect)),\r\n    setQuestionsListSrc: (questionsListSrc: Array<string>) => dispatch(quizReducerActions.setQuestionsListSrc(questionsListSrc)),\r\n    setAudioQuestionSrc: (audioSrc:string) => dispatch(quizReducerActions.setAudioQuestionSrc(audioSrc))\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(MapStateToProps, MapDispatchToProps)\r\n)(Main)\r\n\r\nexport type MapStatePropsType = {\r\n  cardsInfo: Array<CardInfoType>\r\n  arrayOfThemes: Array<CardsBaseKeysType>\r\n  isPlayModeOn: boolean\r\n  activeLink: NavbarLinksType\r\n  audioQuestionSrc: string\r\n  isQuizRunning: boolean\r\n  questionsListSrc: Array<string>\r\n  isMainPageVisible: boolean\r\n  answersList: Array<boolean>\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n  setMainPageCards: (arr: Array<CardsBaseKeysType>) => void\r\n  insertTheme: (theme: CardsBaseKeysType) => void\r\n  setCanISeeRunGameButton: (canISee: boolean) => void\r\n  setActiveLink: (link: NavbarLinksType) => void\r\n  addUserAnswer: (isAnswerCorrect: boolean) => void\r\n  setQuestionsListSrc: (questionsListSrc: Array<string>) => void\r\n  setAudioQuestionSrc: (audioSrc:string) => void\r\n}\r\n\r\n\r\ntype OwnPropsType = {}","import {InferActionsTypes} from \"./redux-store\";\r\nimport {CardsBaseKeysType} from \"./cardsBase\";\r\n\r\nconst initialState = {\r\n  isStatisticPageVisible: false,\r\n  wordsArray: [] as Array<Array<WordsArrayType>>\r\n}\r\n\r\nexport const statisticReducerActions = {\r\n  setIsStatisticPageVisible: (isVisible: boolean) => ({\r\n    type: \"statistic/setIsStatisticPageVisible\",\r\n    isVisible\r\n  }) as const,\r\n  setWords: (wordsArray: Array<Array<WordsArrayType>>) => ({type: \"statistic/setWords\", wordsArray}) as const,\r\n}\r\n\r\nconst statisticReducer = (state = initialState, action: StatisticReducerActionsType) => {\r\n  switch (action.type) {\r\n    case \"statistic/setIsStatisticPageVisible\": {\r\n      return {\r\n        ...state,\r\n        isStatisticPageVisible: action.isVisible\r\n      }\r\n    }\r\n    case \"statistic/setWords\": {\r\n      return {\r\n        ...state,\r\n        wordsArray: action.wordsArray\r\n      }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nexport default statisticReducer;\r\n\r\nexport type StatisticReducerActionsType = InferActionsTypes<typeof statisticReducerActions>\r\n\r\nexport type WordsArrayType = {\r\n  theme: CardsBaseKeysType\r\n  eng: string\r\n  rus: string\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport mainReducer from \"./main-reducer\";\r\nimport navbarReducer from \"./navbar-reducer\";\r\nimport headerReducer from \"./header-reducer\";\r\nimport quizReducer from \"./quiz-reducer\";\r\nimport statisticReducer from \"./statistic-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n  header: headerReducer,\r\n  main: mainReducer,\r\n  navbar: navbarReducer,\r\n  quiz: quizReducer,\r\n  statistic: statisticReducer\r\n})\r\n\r\nconst store = createStore(reducers);\r\n\r\ntype reducersType = typeof reducers; //  вернёт что-то вроде функции (globalstate: AppStateType) => AppStateType\r\nexport type AppStateType = ReturnType<reducersType>  // определить тип возвращаемого значения\r\nexport type InferActionsTypes<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never;\r\n\r\nexport default store;","import React, {useEffect} from \"react\";\r\nimport s from \"./Navbar.module.css\";\r\nimport {MapDispatchPropsType, MapStatePropsType} from \"./NavbarContainer\";\r\nimport {NavbarLinksType} from \"../../redux/navbar-reducer\";\r\n\r\nconst Navbar: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n  function changeParameters(canISeeRunGameButton: boolean,\r\n                            activeLink: NavbarLinksType,\r\n                            isMainPageVisible: boolean,\r\n                            isStatisticPageVisible: boolean) {\r\n    props.setIsQuizRunning(false);\r\n    props.setIsNavbarVisible(false);\r\n\r\n    props.setCanISeeRunGameButton(canISeeRunGameButton);\r\n    props.setActiveLink(activeLink);\r\n    props.setIsMainPageVisible(isMainPageVisible);\r\n    props.setIsStatisticPageVisible(isStatisticPageVisible);\r\n  }\r\n\r\n  useEffect(() => {\r\n    props.getArrayOfThemes();\r\n    props.getArrayOfNavbarIconsUrl();\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const buttons = document.querySelectorAll(\"button\");\r\n    buttons.forEach((el: HTMLButtonElement) => {\r\n      el.classList.remove(s.active);\r\n      if (el.innerText === props.activeLink) {\r\n        el.classList.add(s.active)\r\n      }\r\n    });\r\n  }, [props.activeLink])\r\n\r\n  return (\r\n    <div className={`${s.navbar} ${props.isNavbarVisible || s.navbarToLeft}`}>\r\n      <div className={`${s.hamburgerMenu} ${props.isNavbarVisible && s.hamburgerMenuToRight}`}\r\n           onClick={() => {\r\n             props.setIsNavbarVisible(!props.isNavbarVisible);\r\n           }}>\r\n        <div className={`${s.line} ${props.isNavbarVisible && s.line1}`}></div>\r\n        <div className={`${s.line} ${props.isNavbarVisible && s.line2}`}></div>\r\n        <div className={`${s.line} ${props.isNavbarVisible && s.line3}`}></div>\r\n      </div>\r\n\r\n      <ul className={s.navList}>\r\n        <li className={s.navItem} key={\"navbar0\"}>\r\n          <button className={s.chooseThemeButton}\r\n                  onClick={() => {\r\n                    changeParameters(false, \"Main Page\", true, false);\r\n                    props.setMainPageCards(props.arrayOfThemes);\r\n                  }}>\r\n            Main Page\r\n          </button>\r\n        </li>\r\n\r\n        {props.arrayOfThemes.map((theme, index) => {\r\n          return (\r\n            <li className={s.navItem} key={index}>\r\n              <img className={s.navIcon} src={process.env.PUBLIC_URL + props.arrayOfNavbarIconsUrl[index]} alt={theme}/>\r\n              <button className={s.chooseThemeButton}\r\n                      onClick={() => {\r\n                        changeParameters(true, theme, true, false)\r\n                        props.insertTheme(theme);\r\n                      }}>\r\n                {theme}\r\n              </button>\r\n            </li>\r\n          )\r\n        })}\r\n\r\n        <li className={s.navItem}  key={\"navbar1\"}>\r\n          <button className={s.chooseThemeButton}\r\n                  onClick={() => {\r\n                    changeParameters(false, \"Wordlist\", false, true)\r\n                  }}>\r\n            Wordlist\r\n          </button>\r\n        </li>\r\n\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar;","import {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport Navbar from \"./Navbar\";\r\nimport {\r\n  getArrayOfNavbarIconsUrl,\r\n  getArrayOfThemes, NavbarLinksType,\r\n  navbarReducerActions,\r\n  NavbarReducerActionsType\r\n} from \"../../redux/navbar-reducer\";\r\nimport {CardsBaseKeysType} from \"../../redux/cardsBase\";\r\nimport {MainReducerActionsType, mainReducerActions} from \"../../redux/main-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {headerReducerActions, HeaderReducerActionsType} from \"../../redux/header-reducer\";\r\nimport {statisticReducerActions, StatisticReducerActionsType} from \"../../redux/statistic-reducer\";\r\n\r\nconst MapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    isNavbarVisible: state.navbar.isNavbarVisible,\r\n    arrayOfThemes: state.navbar.arrayOfThemes,\r\n    arrayOfNavbarIconsUrl: state.navbar.arrayOfNavbarIconsUrl,\r\n    activeLink: state.navbar.activeLink\r\n  }\r\n}\r\n\r\nconst MapDispatchToProps = (dispatch: Dispatch<MainReducerActionsType |\r\n  NavbarReducerActionsType |\r\n  StatisticReducerActionsType |\r\n  HeaderReducerActionsType>): MapDispatchPropsType => {\r\n  return {\r\n    setIsNavbarVisible: (arg: boolean) => dispatch(navbarReducerActions.setIsNavbarVisible(arg)),\r\n    insertTheme: (theme: CardsBaseKeysType) => dispatch(mainReducerActions.insertTheme(theme)),\r\n    setMainPageCards: (arr: Array<CardsBaseKeysType>) => dispatch(mainReducerActions.setMainPageCards(arr)),\r\n    getArrayOfThemes: () => getArrayOfThemes(dispatch),\r\n    getArrayOfNavbarIconsUrl: () => getArrayOfNavbarIconsUrl(dispatch),\r\n    setCanISeeRunGameButton: (canISee: boolean) => dispatch(headerReducerActions.setCanISeeRunGameButton(canISee)),\r\n    setIsQuizRunning: (isQuizRunning: boolean) => dispatch(headerReducerActions.setIsQuizRunning(isQuizRunning)),\r\n    setActiveLink: (link: NavbarLinksType) => dispatch(navbarReducerActions.setActiveLink(link)),\r\n    setIsMainPageVisible: (isVisible: boolean) => dispatch(mainReducerActions.setIsMainPageVisible(isVisible)),\r\n    setIsStatisticPageVisible: (isVisible: boolean) => dispatch(statisticReducerActions.setIsStatisticPageVisible(isVisible))\r\n  }\r\n}\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(MapStateToProps, MapDispatchToProps)(Navbar);\r\n\r\nexport type MapStatePropsType = {\r\n  isNavbarVisible: boolean,\r\n  arrayOfThemes: Array<CardsBaseKeysType>,\r\n  arrayOfNavbarIconsUrl: Array<string>,\r\n  activeLink: string\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n  insertTheme: (theme: CardsBaseKeysType) => void\r\n  setMainPageCards: (arr: Array<CardsBaseKeysType>) => void\r\n  getArrayOfThemes: () => void\r\n  getArrayOfNavbarIconsUrl: () => void\r\n  setCanISeeRunGameButton: (canISee: boolean) => void\r\n  setIsQuizRunning: (isQuizRunning: boolean) => void\r\n  setActiveLink: (link: NavbarLinksType) => void\r\n  setIsNavbarVisible: (arg: boolean) => void\r\n  setIsMainPageVisible: (isVisible: boolean) => void\r\n  setIsStatisticPageVisible: (isVisible: boolean) => void\r\n}\r\n","import styles from \"./Header.module.css\";\r\nimport {MapDispatchPropsType, MapStatePropsType} from \"./HeaderContainer\";\r\nimport {useEffect} from \"react\";\r\n\r\nconst Header: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n  useEffect(() => {\r\n    props.cleanAnswersList()\r\n  }, [props.isQuizRunning])\r\n\r\n  const audio = new Audio();\r\n\r\n  return (\r\n    <div className={styles.header}>\r\n      <h1>Happy English</h1>\r\n      <div className={styles.gamModeWrapper}>\r\n        <div className={styles.gameMode}\r\n             onClick={() => {\r\n               props.isPlayModeOn\r\n                 ? props.setPlayModeOff()\r\n                 : props.setPlayModeOn()\r\n             }}>\r\n          <div className={`${styles.gameModeTrigger} ${props.isPlayModeOn && styles.play}`}></div>\r\n        </div>\r\n        <div className={styles.gameModeTitle}>\r\n          Train / Play\r\n        </div>\r\n      </div>\r\n      <div className={`${styles.startGameButton} ${props.canISeeRunGameButton || styles.hide}`}>\r\n        <i\r\n          className={`far fa-caret-square-right ${styles[\"fa-caret-square-right\"]} ${props.isPlayModeOn || styles.hide} ${props.isQuizRunning && styles.hide}`}\r\n          onClick={() => {\r\n            props.setIsQuizRunning(true);\r\n            const newArr:Array<string> = [];\r\n            props.arrayOfAudioQuestionsSrc.forEach((el)=> {\r\n              newArr.push(el)\r\n            })\r\n            props.setQuestionsListSrc(newArr);\r\n            const question = newArr.pop();\r\n            props.setQuestionsListSrc(newArr);\r\n            question && props.setAudioQuestionSrc(question)\r\n            audio.src = process.env.PUBLIC_URL + question;\r\n            setTimeout(()=>audio.play(),500);\r\n          }}>\r\n        </i>\r\n        <div onClick={() => {\r\n          audio.src = process.env.PUBLIC_URL + props.audioQuestionSrc;\r\n          setTimeout(()=>audio.play(),500);\r\n        }}>\r\n          <i className={`fas fa-sync-alt ${styles[\"fa-sync-alt\"]} ${props.isQuizRunning || styles.hide}`}></i>\r\n        </div>\r\n      </div>\r\n      <div className={styles.emojiPanel}>\r\n        {\r\n          props.answersList.map((el:boolean, index:number) => {\r\n            return el\r\n              ? <i className=\"far fa-laugh-beam\" key={index}></i>\r\n              : <i className=\"fas fa-poo\" key={index}></i>\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;","import Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {headerReducerActions, HeaderReducerActionsType} from \"../../redux/header-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {quizReducerActions, QuizReducerActionsType} from \"../../redux/quiz-reducer\";\r\n\r\nconst MapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    isPlayModeOn: state.header.isPlayModeOn,\r\n    isThemeSelected: state.header.isThemeSelected,\r\n    isQuizRunning: state.header.isQuizRunning,\r\n    canISeeRunGameButton: state.header.canISeeRunGameButton,\r\n    audioQuestionSrc: state.quiz.audioQuestionSrc,\r\n    answersList: state.quiz.answersList,\r\n    arrayOfAudioQuestionsSrc: state.main.arrayOfAudioQuestionsSrc\r\n  }\r\n}\r\n\r\nconst MapDispatchToProps = (dispatch: Dispatch<HeaderReducerActionsType | QuizReducerActionsType>) => {\r\n  return {\r\n    setPlayModeOn: () => dispatch(headerReducerActions.setPlayModeOn()),\r\n    setPlayModeOff: () => dispatch(headerReducerActions.setPlayModeOff()),\r\n    setIsQuizRunning: (isQuizRunning: boolean) => dispatch(headerReducerActions.setIsQuizRunning(isQuizRunning)),\r\n    setQuestionsListSrc: (questionsListSrc: Array<string>) => dispatch(quizReducerActions.setQuestionsListSrc(questionsListSrc)),\r\n    setAudioQuestionSrc: (audioSrc:string) => dispatch(quizReducerActions.setAudioQuestionSrc(audioSrc)),\r\n    cleanAnswersList: () => dispatch(quizReducerActions.cleanAnswersList()),\r\n  }\r\n}\r\n\r\nexport default connect(MapStateToProps, MapDispatchToProps)(Header);\r\n\r\nexport type MapStatePropsType = {\r\n  isPlayModeOn: boolean,\r\n  isThemeSelected: boolean,\r\n  isQuizRunning: boolean,\r\n  canISeeRunGameButton: boolean,\r\n  audioQuestionSrc: string,\r\n  answersList: Array<boolean>,\r\n  arrayOfAudioQuestionsSrc: Array<string>\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n  setPlayModeOn: () => void\r\n  setPlayModeOff: () => void\r\n  setIsQuizRunning: (isQuizRunning: boolean) => void\r\n  setQuestionsListSrc: (questionsListSrc: Array<string>) => void\r\n  setAudioQuestionSrc: (audioSrc:string) => void\r\n  cleanAnswersList: () => void\r\n}","import {MapDispatchPropsType, MapStatePropsType} from \"./OverlayContainer\";\r\nimport styles from \"./Overlay.module.css\";\r\n\r\nexport const Overlay: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n  return <div className={`${styles.overlay} ${props.isNavbarVisible || styles.hide}`}\r\n              onClick={() => {\r\n                props.setIsNavbarVisible(false)\r\n              }}></div>\r\n}\r\n\r\nexport default Overlay;","import {AppStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport Overlay from \"./Overlay\";\r\nimport {navbarReducerActions, NavbarReducerActionsType} from \"../../redux/navbar-reducer\";\r\n\r\nconst MapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    isNavbarVisible: state.navbar.isNavbarVisible,\r\n  }\r\n}\r\n\r\nconst MapDispatchToProps = (dispatch: Dispatch<NavbarReducerActionsType>): MapDispatchPropsType => {\r\n  return {\r\n    setIsNavbarVisible: (arg: boolean) => dispatch(navbarReducerActions.setIsNavbarVisible(arg))\r\n  }\r\n}\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(MapStateToProps, MapDispatchToProps)(Overlay);\r\n\r\nexport type MapStatePropsType = {\r\n  isNavbarVisible: boolean\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n  setIsNavbarVisible: (arg: boolean) => void\r\n}","import styles from \"./Statistic.module.css\"\r\nimport {MapDispatchPropsType, MapStatePropsType} from \"./StatisticContainer\";\r\nimport {WordsArrayType} from \"../../redux/statistic-reducer\";\r\nimport {useEffect} from \"react\";\r\n\r\nconst Statistic: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n  useEffect(() => {\r\n    props.setWords(props.wordsArray)\r\n  }, [props.wordsArray])\r\n\r\n  return (\r\n    <table className={`${styles.table} ${props.isStatisticPageVisible || styles.hide}`}>\r\n      <thead className=\"thead\">\r\n      <tr className=\"thead\">\r\n        <th className={styles.colName}>Theme</th>\r\n        <th className={styles.colName}>Word</th>\r\n        <th className={styles.colName}>Translation</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody className=\"tbody\">\r\n      {props.wordsArray.map((item:Array<WordsArrayType>) => {\r\n        return item.map((el:WordsArrayType, index: number) => {\r\n          return (\r\n            <tr className=\"thead\" key={index}>\r\n              <th className={styles.colName}>{el.theme}</th>\r\n              <th className={styles.colName}>{el.eng}</th>\r\n              <th className={styles.colName}>{el.rus}</th>\r\n            </tr>\r\n          )\r\n        })\r\n      })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default Statistic;","import {createSelector} from \"reselect\";\r\nimport cardsBase, {CardsBaseKeysType} from \"../../redux/cardsBase\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nconst getArrayOfThemes = (state: AppStateType) => {\r\n  return state.navbar.arrayOfThemes\r\n}\r\n\r\nexport const getWords = createSelector(getArrayOfThemes, (arrayOfThemes: Array<CardsBaseKeysType>) => arrayOfThemes.map(key => {\r\n  return cardsBase[key].cards.map(card => {\r\n    return {\r\n      theme: key,\r\n      eng: card.wordInEnglish,\r\n      rus: card.wordInRussian\r\n    }\r\n  })})\r\n)\r\n","import Statistic from \"./Statistic\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {statisticReducerActions, StatisticReducerActionsType, WordsArrayType} from \"../../redux/statistic-reducer\";\r\nimport {CardsBaseKeysType} from \"../../redux/cardsBase\";\r\nimport {getWords} from \"../Common/selectors\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst MapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    isStatisticPageVisible: state.statistic.isStatisticPageVisible,\r\n    wordsArray: getWords(state),\r\n    arrayOfThemes: state.navbar.arrayOfThemes\r\n  }\r\n}\r\n\r\nconst MapDispatchToProps = (dispatch: Dispatch<StatisticReducerActionsType>) => {\r\n  return {\r\n    setWords: (wordsArray: Array<Array<WordsArrayType>>) => dispatch(statisticReducerActions.setWords(wordsArray))\r\n  }\r\n}\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(MapStateToProps, MapDispatchToProps)(Statistic);\r\n\r\nexport type MapStatePropsType = {\r\n  isStatisticPageVisible: boolean,\r\n  wordsArray: Array<Array<WordsArrayType>>;\r\n  arrayOfThemes: Array<CardsBaseKeysType>\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n  setWords: (wordsArray: Array<Array<WordsArrayType>>) => void\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport MainContainer from \"./components/Main/MainContainer\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/redux-store\";\nimport NavbarContainer from \"./components/Navbar/NavbarContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport OverlayContainer from \"./components/Overlay/OverlayContainer\";\nimport StatisticContainer from \"./components/Statistic/StatisticContainer\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <BrowserRouter>\n          <NavbarContainer/>\n          <HeaderContainer/>\n          <MainContainer/>\n          <StatisticContainer/>\n          <OverlayContainer/>\n        </BrowserRouter>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__RLD7X\",\"navbarToLeft\":\"Navbar_navbarToLeft__2SRR6\",\"hamburgerMenu\":\"Navbar_hamburgerMenu__ur6BI\",\"hamburgerMenuToRight\":\"Navbar_hamburgerMenuToRight__3kJom\",\"line\":\"Navbar_line__21bPg\",\"line1\":\"Navbar_line1__2Ev_Y\",\"line2\":\"Navbar_line2__1F83v\",\"line3\":\"Navbar_line3__3uH32\",\"navList\":\"Navbar_navList__1AvIq\",\"navItem\":\"Navbar_navItem__39hcb\",\"navIcon\":\"Navbar_navIcon__1RRW0\",\"chooseThemeButton\":\"Navbar_chooseThemeButton__15Z7K\",\"active\":\"Navbar_active__eIPJV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"frontCard\":\"Card_frontCard__1nlf6\",\"frontCardTheme\":\"Card_frontCardTheme__21wjv\",\"frontCardImage\":\"Card_frontCardImage__pl12E\",\"flipEffect\":\"Card_flipEffect__1Z9dH\",\"wordInEnglish\":\"Card_wordInEnglish__3uNf6\",\"readAWordButton\":\"Card_readAWordButton__3tOTX\",\"reverseCardButton\":\"Card_reverseCardButton__2ByXz\",\"backCard\":\"Card_backCard__1Hke5\",\"backCardImage\":\"Card_backCardImage__3qLX9\",\"wordInRussian\":\"Card_wordInRussian__1y_Wu\",\"hide\":\"Card_hide__2qgR1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2fMWR\",\"gameMode\":\"Header_gameMode__1YJ5Z\",\"gameModeTrigger\":\"Header_gameModeTrigger__3PbkG\",\"play\":\"Header_play__bXmc-\",\"gameModeTitle\":\"Header_gameModeTitle__16JZo\",\"startGameButton\":\"Header_startGameButton__3R0C3\",\"fa-caret-square-right\":\"Header_fa-caret-square-right__PpG7V\",\"fa-sync-alt\":\"Header_fa-sync-alt__29fEy\",\"emojiPanel\":\"Header_emojiPanel__2xeSr\",\"hide\":\"Header_hide__3SVlN\"};"],"sourceRoot":""}